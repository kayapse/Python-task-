import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup

API_TOKEN = 'YOUR_BOT_TOKEN_HERE'  #  –í—Å—Ç–∞–≤ —Å—é–¥–∏ —Ç–æ–∫–µ–Ω —Å–≤–æ–≥–æ –±–æ—Ç–∞

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

DATA_FILE = "notes.json"

def load_notes():
    if not os.path.exists(DATA_FILE):
        return []
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_notes(notes):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(notes, f, ensure_ascii=False, indent=2)

# –°—Ç–∞–Ω –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ—Ç–∞—Ç–∫–∏
class AddNoteState(StatesGroup):
    waiting_for_note = State()

# –°—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫—É
class SearchNoteState(StatesGroup):
    waiting_for_keyword = State()

@dp.message_handler(commands=['start'])
async def cmd_start(message: Message):
    await message.answer(" –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–æ—Ç–∞—Ç–æ–∫.\n–ù–∞–ø–∏—à–∏ /help —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –±—ñ–ª—å—à–µ.")

@dp.message_handler(commands=['help'])
async def cmd_help(message: Message):
    await message.answer(
        "/start - –ø–æ—á–∞—Ç–∏\n"
        "/help - –¥–æ–ø–æ–º–æ–≥–∞\n"
        "/info - –ø—Ä–æ –±–æ—Ç–∞\n"
        "/add - –¥–æ–¥–∞—Ç–∏ –Ω–æ—Ç–∞—Ç–∫—É\n"
        "/list - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –Ω–æ—Ç–∞—Ç–∫–∏\n"
        "/search - –ø–æ—à—É–∫ –Ω–æ—Ç–∞—Ç–∫–∏\n"
        "/exit - –∑–∞–≤–µ—Ä—à–∏—Ç–∏"
    )

@dp.message_handler(commands=['info'])
async def cmd_info(message: Message):
    await message.answer(" –¶–µ–π –±–æ—Ç –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä—ñ–≥–∞—Ç–∏, –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ç–∞ —à—É–∫–∞—Ç–∏ –≤–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏.")

@dp.message_handler(commands=['exit'])
async def cmd_exit(message: Message):
    await message.answer(" –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")

@dp.message_handler(commands=['add'])
async def cmd_add(message: Message):
    await message.answer(" –í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –Ω–æ—Ç–∞—Ç–∫–∏:")
    await AddNoteState.waiting_for_note.set()

@dp.message_handler(state=AddNoteState.waiting_for_note)
async def process_add_note(message: Message, state: FSMContext):
    note = message.text
    notes = load_notes()
    notes.append(note)
    save_notes(notes)
    await message.answer(" –ù–æ—Ç–∞—Ç–∫—É –¥–æ–¥–∞–Ω–æ.")
    await state.finish()

@dp.message_handler(commands=['list'])
async def cmd_list(message: Message):
    notes = load_notes()
    if not notes:
        await message.answer("üì≠ –ù–æ—Ç–∞—Ç–æ–∫ —â–µ –Ω–µ–º–∞—î.")
    else:
        reply = "–í–∞—à—ñ –Ω–æ—Ç–∞—Ç–∫–∏:\n" + "\n".join([f"{i+1}. {n}" for i, n in enumerate(notes)])
        await message.answer(reply)

@dp.message_handler(commands=['search'])
async def cmd_search(message: Message):
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ—à—É–∫—É:")
    await SearchNoteState.waiting_for_keyword.set()

@dp.message_handler(state=SearchNoteState.waiting_for_keyword)
async def process_search(message: Message, state: FSMContext):
    keyword = message.text.lower()
    notes = load_notes()
    results = [n for n in notes if keyword in n.lower()]
    if results:
        reply = " –ó–Ω–∞–π–¥–µ–Ω–æ:\n" + "\n".join([f"‚Ä¢ {r}" for r in results])
    else:
        reply = " –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
    await message.answer(reply)
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
